podTemplate(yaml:"""
kind: Pod
spec:
  serviceAccountName: jenkins-deployer
  containers:
  - name: kaniko
    image: gcr.io/kaniko-project/executor:debug
    imagePullPolicy: IfNotPresent
    command:
    - cat
    tty: true
    volumeMounts:
      - name: registry-secret
        mountPath: /kaniko/.docker
      - name: maven-home
        mountPath: /home/jenkins
  - name: graalvm
    image: ghcr.io/graalvm/native-image:22.2.0
    imagePullPolicy: IfNotPresent
    command:
    - cat
    tty: true
    volumeMounts:
      - name: maven-home
        mountPath: /root/.m2
  - name: kubernetes
    image: kutzhang/kubectl:1.24
    imagePullPolicy: IfNotPresent
    tty: true
    command:
    - cat
  - name: busybox
    image: nginx:1.23.1
    imagePullPolicy: IfNotPresent
    tty: true
    command:
    - cat
  volumes:
    - name: maven-home
      persistentVolumeClaim:
        claimName: maven-repo-storage
    - name: registry-secret
      secret:
        secretName: harbor-registry-client
        items:
          - key: .dockerconfigjson
            path: config.json
"""
  ) {
    node(POD_LABEL) {
        def version = new Date().format("yyyyMMddHHmmss")

        stage('Initialize') {
            currentBuild.displayName = version
        }

        stage('Clone codes') {
            git url:env.GIT_URL, branch:env.GIT_BRANCH
        }

        stage('Prepare CD') {
            dir('cd') {
                git url:"https://github.com/kutzhang/study-jenkins.git", branch:"main"
            }
        }

        stage('Build') {
            container('graalvm') {
                sh './mvnw clean'
                sh './mvnw package'
            }
        }

        stage('Build image') {
            container('kaniko') {
                sh "/kaniko/executor --skip-tls-verify --dockerfile=./src/main/docker/Dockerfile.jvm -c . --destination=harbor.infra.svc.cluster.local/study/${env.APP_NAME}:${version}"
            }
        }

        stage('Deploy') {
            try {
                container('kubernetes') {
                    sh "kubectl get deployments -n ${env.DEPLOY_NAMESPACE} ${env.APP_NAME}"
                    sh "kubectl set image deployment -n ${env.DEPLOY_NAMESPACE} ${env.APP_NAME} ${env.APP_NAME}=harbor.infra.svc.cluster.local/study/${env.APP_NAME}:${version}"
                }
            } catch (e) {
                container('busybox') {
                    sh 'envsubst < cd/quarkus/deploy.yaml > deploy.yaml'
                }
                
                container('kubernetes') {
                    sh "kubectl apply -f ./deploy.yaml -n ${env.DEPLOY_NAMESPACE}"
                }
            }

            container('kubernetes') {
                sh "kubectl rollout status deployment -n ${env.DEPLOY_NAMESPACE} ${env.APP_NAME}"
            }
        }
    }
}