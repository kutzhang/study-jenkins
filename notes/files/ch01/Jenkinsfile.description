pipeline {
    agent any

    options {
        timestamps()
        disableConcurrentBuilds()
        timeout(time: 30, unit: 'MINUTES')
    }

    environment {
        PROJECT_NAME = 'Description'
        PROJECT_OWNER = 'Kut Zhang'
        MAVEN_HOME = null
    }

    tools {
        maven 'maven'
    }

    parameters {
        string name: 'message', defaultValue: 'show me the money', description: 'What the message you need to show?'
        booleanParam name: 'needShowMessage', defaultValue: true, description: 'Do you need to show message on pipeline?'
    }

    stages {
        stage('Prepare Environment') {
            steps {
                script {
                    def projectProperties = readProperties file: './notes/files/ch01/env.properties'
                    println(projectProperties)
                    // for (def entry in projectProperties) {
                    //     env[entry.key] = entry.value
                    // }
                    projectProperties.each { entry -> 
                        env[entry.key] = entry.value
                    }
                }
            }
        }

        stage('Show Message') {
            when {
                expression {
                    params.needShowMessage == true
                }
            }

            steps {
                echo "Parameter message=${message}"
                echo "${env.PROJECT_NAME} Processing by ${env.PROJECT_OWNER}....."
            }
        }

        stage('Continure?') {
            steps {
                timeout(time: 30, unit: 'MINUTES') {
                    input message: 'Do you need to continued?', ok: 'Yes'
                }
            }
        }

        stage('Send Notification') {
            steps {
                script {
                    timeout(time: 30, unit: 'MINUTES') {
                        env.sendNotificationEnable = input message: 'Are you sure to sending notification?', ok: 'Yes', parameters: [
                            booleanParam(name: 'Send notification', defaultValue: true)
                        ]
                    }
                    if (env.sendNotificationEnable) {
                        println('Sending notifications............')
                        println('Notifications have been sent')
                    }
                }
            }
        }

        stage('Proccessing') {
            failFast true
            parallel {
                stage('Build Package') {
                    steps {
                        script {
                            env.MAVEN_HOME = tool name: 'maven', type: 'maven'
                        }
                        echo "MAVEN_HOME: ${env.MAVEN_HOME}"
                        sh 'printenv'
                        sh 'mvn --version'

                        echo 'Starting build package.......'
                        sleep(45)
                        echo 'Build package complete'
                    }
                }

                stage('Code Scan') {
                    steps {
                        echo 'Starting code scan.......'
                        sleep(30)
                        echo 'Code scan complete'
                    }
                }

                stage('Code Coverage') {
                    steps {
                        echo 'Starting code coverage.......'
                        sleep(20)
                        echo 'Code coverage complete'
                    }
                }
            }
        }

        stage('Complete') {
            steps {
                echo 'Complete'
            }
        }
    }

    post {
        success {
            script {
                currentBuild.description = 'All Completed'
            }
        }
    }
}
